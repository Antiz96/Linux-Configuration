# My personal routine to install Arch Linux with full disk encryption
# Before encrypting your disk, make sure you know what are the consequences (https://www.makeuseof.com/tag/4-reasons-encrypt-linux-partitions/)

$ loadkeys fr #Change Keyboard Layout

$ ping archlinux.org #Check if I have access to the internet

$ timedatectl set-ntp true #Set NTP
$ timedatectl status #Check the NTP Status

$ fdisk -l #Check the hard drives names to select the one I want to install Arch Linux on
$ fdisk /dev/nvme0n1 #Partitioning the disk I want to install Arch on

Partitions :
Delete current partitions ---> o option (This deletes every partitions, use the "d" option instead if you want to delete specific partitions)
Create a GPT partition table (cause I use EFI) ---> g option

Create a 550M EFI partition ---> n option
Create a Swap partition ---> n option (4G for me, https://itsfoss.com/swap-size/)
Create a Root partition with the rest ---> n option

Change the first partition type to EFI ---> t option, type 1
Change the second partition type to Linux swap ---> t option, type 19
Change the third partition type to Linux filesystem ---> t option, type 20

Write the table to the disk ---> w option

$ mkfs.fat -F32 /dev/nvme0n1p1 #Make the filesystem for the EFI partition
$ mkswap /dev/nvme0n1p2 #Make the filesystem for the Swap partition
$ swapon /dev/nvme0n1p2 #Activate swap on the system

$ cryptsetup -y -v luksFormat /dev/nvme0n1p3 #Setup the encryption for the root partition and choose my passphrase
$ cryptsetup open /dev/nvme0n1p3 root #Open my partition and give it a name that will be used by the mapper. In my case, the name is "root"
$ mkfs.ext4 /dev/mapper/root #Make the filesystem for the root partition

$ mount /dev/mapper/root /mnt #Mount the Root partition to install my system's base on it
$ mkdir /mnt/boot #Create the /boot directory (the EFI partition has to be mounted specifically in /boot when doing LUKS encryption and not /boot/EFI, otherwise it will also be encrypted and you'll need extra steps to make grub being able to decrypt it. Futhermore, grub only has a partial Luks2 support, so even tho it is possible I do not recommend it. If you want to do it anyway, check https://wiki.archlinux.org/title/GRUB#Encrypted_/boot)                                                                                                                                             
$ mount /dev/nvme0n1p1 /mnt/boot #Mount my boot partition on it (the EFI partition has to be mounted specifically in /boot when doing LUKS encryption and not /boot/EFI, otherwise you'll get to grub rescue at boot)

$ pacstrap /mnt base linux linux-firmware #Install my system's base on the root partition

$ genfstab -U /mnt >> /mnt/etc/fstab #Generating the fstab

$ arch-chroot /mnt #Log in my new system's base on the root partition

$ ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime #Set up my Region Info

$ hwclock --systohc #Update my Hardware Clock

$ pacman -S vim #Install vim (or any other editor), needed for the rest

$ vim /etc/locale.gen #Uncomment my local in that file (for me : fr_FR.UTF-8 UTF-8)
$ locale-gen #Apply the configuration
$ vim /etc/locale.conf #Set the LANG variable accordingly in this file (for me : LANG=fr_FR.UTF-8
$ vim /etc/vconsole.conf #Set my Keymap in this file (for me : KEYMAP=fr)

$ vim /etc/hostname #Create the hostname file and put my hostname in it (for me : Arch Linux)
$ vim /etc/hosts #Edit the hosts file and add lines from the Arch Wiki ---> https://wiki.archlinux.org/index.php/Installation_guide#Network_configuration. For me:
127.0.0.1	localhost
::1		localhost
127.0.1.1	Arch-Linux.localdomain	Arch-Linux

$ passwd #Change the root password

$ useradd -m rcandau #Create my user
$ passwd rcandau #Setup a password for my user
$ usermod -aG wheel,audio,video,optical,storage,games rcandau #Add my user to some useful groups
n
$ pacman -S sudo #Install sudo
$ visudo #Uncomment the line that allows wheel group members to use sudo on any command ---> %wheel ALL=(ALL) ALL

$ pacman -S grub efibootmgr dosfstools mtools #Install the grub bootloader and dependencies for EFI. Also install "os-prober" if you wish to do a dual boot with another distro/OS.
$ vim /etc/mkinitcpio.conf #Add "keyboard", "keymap" and "encrypt" hooks into the init configuration for the encrytion.
[...]
HOOKS=(base udev autodetect keyboard keymap modconf block encrypt filesystems fsck)
[...]
$ mkinitcpio -p linux #Refresh the init configuration for my kernel
$ blkid > /tmp/uuid #Redirect blkid output to a file so I can copy the UUID of my encrypted disk from vim (as we need to put it into the GRUB configuration for the encryption)
$ vim /tmp/uuid #Copying the UUID of my encrypted root partition with vim to paste it into the GRUB configuration
$ vim /etc/default/grub #Modify the "GRUB_CMDLINE_LINUX" to tell GRUB which partition is encrypted (in the following format : cryptdevice=UUID=UUID_of_your_root_partition:Name_of_your_encrypted_container root=/dev/mapper/Name_of_your_encrypted_container). You chose the name of your encrypted container during line 35 of this tutorial.
[...]
GRUB_CMDLINE_LINUX="cryptdevice=UUID=a8d3a797-ed29-4c3e-8c1e-aaaaa6b1c989:root root=/dev/mapper/root"
[...]
$ grub-install --target=x86_64-efi --bootloader-id=arch-linux --efi-directory=/boot --recheck #Install grub on my EFI partition
$ grub-mkconfig -o /boot/grub/grub.cfg #Generating the Grub configuration file

$ pacman -S networkmanager #Install networkmanager (needed to get and manage my internet connexion)
$ systemctl enable NetworkManager #Autostart NetworkManager at boot

$ exit #Get out of the chroot
$ umount -l /mnt #Umount my /mnt mounted point

$ reboot #Reboot the computer to boot into my fresh Arch Install

# Log in with my user (rcandau)

$ sudo pacman -S base-devel linux-headers man bash-completion xorg-server intel-ucode nvidia #Installing additional useful packages and drivers for my system

--Desktop Environment Section--
I've used GNOME and XFCE in the past (performing minimal installations) but I recently switched to IceWM. Here's my installation routine for the three of them. 

##Minimal GNOME installation (according to my personal preferences. Check https://archlinux.org/groups/x86_64/gnome/ & https://archlinux.org/groups/x86_64/gnome-extra/ to see what you want to install or not). If you want a complete GNOME installation, just install the "gnome" package (and the "gnome-extra" package if you want to)##
$ sudo pacman -S $(curl https://raw.githubusercontent.com/Antiz96/Linux-Customisation/master/Arch-Linux/Packages/gnome-minimal-packages.txt)
$ sudo systemctl enable gdm

##Minimal XFCE installation (according to my personal preferences. Check https://archlinux.org/groups/x86_64/xfce4/ & https://archlinux.org/groups/x86_64/xfce4-goodies/ to see what you want to install or not). If you want a complete XFCE installation, just install the "xfce4" and the "xfce4-goodies" packages##
$ sudo pacman -S $(curl https://raw.githubusercontent.com/Antiz96/Linux-Customisation/master/Arch-Linux/Packages/xfce-minimal-packages.txt)
$ sudo systemctl enable lightdm

##Minimal IceWM installation (according to my personal preferences).
$ sudo pacman -S $(curl https://raw.githubusercontent.com/Antiz96/Linux-Customisation/master/Arch-Linux/Packages/icewm-minimal-packages.txt)

$ cp /etc/X11/xinit/xinitrc ~/.xinitrc

$ vim ~/.xinitrc (Delete the 5 last lines and add the following ones)
#Start IceWM
export XDG_SESSION_TYPE=X11
numlockx &
exec icewm-session

$ vim ~/.bash_profile
[...]
#Autostart IceWM
if [ -z "${DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
  exec startx
fi
--End of the Desktop Environment Section--

$ localectl --no-convert set-x11-keymap fr #Configure Keyboard layout for x11

$ sudo grub-mkconfig -o /boot/grub/grub.cfg #Regenerating grub configuration (Specially for intel-ucode)

$ reboot #Reboot into my system with GUI (select GNOME on XORG in GDM if I installed GNOME)

# Base Installation complete